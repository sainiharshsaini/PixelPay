generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets=["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                Int               @id @default(autoincrement())
  email             String?           @unique
  name              String?
  phoneNumber       String            @unique
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  balances          Balance[]
  onRampTransactions OnRampTransaction[]
  sentTransfers     P2PTransfer[]     @relation("SentTransfers")
  receivedTransfers P2PTransfer[]     @relation("ReceivedTransfers")
}

model Merchant {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  authType  AuthType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Balance {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  amount    Int     @default(0) // Current available balance
  locked    Int     @default(0) // For pending txns
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OnRampTransaction {
  id        Int           @id @default(autoincrement())
  status    OnRampStatus
  provider  String
  token     String        @unique
  amount    Int
  startTime DateTime      @default(now())
  endTime   DateTime?
  userId    Int

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model P2PTransfer {
  id          Int       @id @default(autoincrement())
  amount      Int
  status      TransferStatus @default(Pending)
  timestamp   DateTime  @default(now())

  fromUserId  Int
  fromUser    User      @relation("SentTransfers", fields: [fromUserId], references: [id], onDelete: Cascade)

  toUserId    Int
  toUser      User      @relation("ReceivedTransfers", fields: [toUserId], references: [id], onDelete: Cascade)
}

enum AuthType {
  Google
  Github
  EmailPassword
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

enum TransferStatus {
  Pending
  Success
  Failed
}